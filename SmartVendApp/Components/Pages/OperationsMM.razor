@page "/operationsmm"
@using SmartVendApp.Services;
@inject DostawcyDataStore DostawcyStore;
@using SmartVendApp.ServiceReference
@using SmartVendApp.Controllers.Dostawcy;
@inject DostawcyDataStore DataStore
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject DostawcyController Controller

<h3>Zarządzanie dostawcami</h3>

@if (Controller.IsLoading)
{
    <div class="alert alert-info">Ładowanie danych...</div>
}
else if (Controller.ErrorMessage != null)
{
    <div class="alert alert-danger">@Controller.ErrorMessage</div>
}
else if (Controller.Items == null || !Controller.Items.Any())
{
    <div class="alert alert-warning">Brak dostawców w systemie</div>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="Controller.ModalController.ShowAddModal">Dodaj nowego dostawcę</button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nazwa</th>
                <th>Miasto</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Controller.Items)
            {
                <tr>
                    <td>@item.Iddostawcy</td>
                    <td>@item.Nazwa</td>
                    <td>@item.Miasto</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => Controller.ModalController.ShowEditModal(item)">Edytuj</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(item.Iddostawcy)">Usuń</button>

                        @if (showSuccess)
                        {
                            <div class="alert alert-success mt-2">Dostawca został usunięty</div>
                        }
                        @if (showError)
                        {
                            <div class="alert alert-danger mt-2">Błąd podczas usuwania</div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Controller.ModalController.ShowModal)
{
    <div class="modal" style="display:block; background:rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(Controller.ModalController.IsNew ? "Dodaj nowego" : "Edytuj") dostawcę</h5>
                    <button type="button" class="close" @onclick="Controller.ModalController.CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Nazwa:</label>
                        <InputText class="form-control" @bind-Value="@Controller.ModalController.CurrentItem.Nazwa" />
                    </div>
                    <div class="form-group">
                        <label>Miasto:</label>
                        <InputText class="form-control" @bind-Value="@Controller.ModalController.CurrentItem.Miasto" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Controller.ModalController.CloseModal">Anuluj</button>
                    <button class="btn btn-primary" @onclick="SaveItem">Zapisz</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showSuccess;
    private bool showError;
    private int itemToDelete;

    protected override async Task OnInitializedAsync()
    {
        await Controller.LoadDataAsync();
    }

    private async Task SaveItem()
    {
        if (await Controller.ModalController.SaveAsync())
        {
            await Controller.LoadDataAsync();
        }
    }

    private async Task ConfirmDelete(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć tego dostawcę?"))
        {
            if (await Controller.DeleteItemAsync(id))
            {
                showSuccess = true;
                showError = false;
                await Task.Delay(3000);
                showSuccess = false;
            }
            else
            {
                showError = true;
                showSuccess = false;
            }
        }
    }
}