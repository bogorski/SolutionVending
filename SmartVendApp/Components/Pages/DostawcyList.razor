@page "/dostawcyList"
@using SmartVendApp.Controllers.Dostawcy;
@using SmartVendApp.Components.Pages.Components;
@using SmartVendApp.ServiceReference;

@inject DostawcyController Controller;

<h2>Lista Dostawców</h2>
@if (Controller.IsLoading)
{
                            <div class="alert alert-info">Ładowanie danych...</div>
}
else if (!string.IsNullOrEmpty(Controller.ErrorMessage))
{
                            <div class="alert alert-danger">@Controller.ErrorMessage</div>
}
else if (Controller.Items == null || !Controller.Items.Any())
{
                            <div class="alert alert-warning">Brak dostawców w systemie</div>
}
else
{
            <GenericList TItem="DostawcyForView"
                         Items="@Controller.Items"
                         Name="Dostawca" />
}
@if (Controller.ModalController.ShowModal)
{
                     <AddEditModal TItem="DostawcyForView"
                                        Fields="@GetModalFields()"
                                     Title=@(Controller.ModalController.IsNew ? "Dodaj nowego" : "Edytuj") dostawcę />
}
@code {
    private List<AddEditModal<DostawcyForView>.FormField> GetModalFields()
    {
        return new()
        {
            new AddEditModal<DostawcyForView>.FormField
            {
                Label = "Nazwa",
                Value = Controller.ModalController.CurrentItem?.Nazwa ?? string.Empty
            },
            // inne pola
        };
    }
    protected override async Task OnInitializedAsync()
    {
        await Controller.LoadDataAsync();
    }
    private async Task SaveItem()
    {
        if (await Controller.ModalController.SaveAsync())
        {
            await Controller.LoadDataAsync();
        }
    }
    private async Task DeleteItem()
    {
        if (await Controller.ModalController.DeleteAsync())
        {
            await Controller.LoadDataAsync();
            StateHasChanged();
            await ShowSuccessMessage();
        }
    }
    private async Task ShowSuccessMessage()
    {
        await Task.Delay(3000);
        Controller.ModalController.ShowSuccess = false;
    }
}
